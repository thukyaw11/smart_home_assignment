/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import net.proteanit.sql.DbUtils;
import utils.DBService;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import javax.swing.*;

/**
 *
 * @author devminnthu
 */
public class ManageData extends javax.swing.JFrame {

    /**
     * Creates new form ManageData
     */
    public ManageData() {
        initComponents();
        
        loadViewData();
        loadInsertData();
        loadUpdateData();
        loadDeleteData();
        
        viewDataCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String selectedTable = (String) viewDataCombo.getSelectedItem();

                displayTable(viewDataTable , selectedTable, false);
                loadSearchColumn(selectedTable, searchColCombo);
            }
        });
        
        insertDataCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String selectedTable = (String) insertDataCombo.getSelectedItem();
                displayTable(insertDataTable, selectedTable, true);
            }
        });
        
        updateDataCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String selectedTable = (String) updateDataCombo.getSelectedItem();
                displayTable(updateDataTable, selectedTable, false);
                loadSearchColumn(selectedTable, updateDataSearchCombo);
            }
        });
        
        deleteDataCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String selectedTable = (String) deleteDataCombo.getSelectedItem();
                displayTable(deleteDataTable, selectedTable, false);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        viewDataTab = new javax.swing.JButton();
        insertDataTab = new javax.swing.JButton();
        updateDataTab = new javax.swing.JButton();
        deleteDataTab = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        TabPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchKeyWordField = new javax.swing.JTextField();
        viewDataCombo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewDataTable = new javax.swing.JTable();
        searchColCombo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        searchBtn = new javax.swing.JButton();
        reloadButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        insertDataCombo = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        insertDataTable = new javax.swing.JTable();
        insertDataBtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        updateDataCombo = new javax.swing.JComboBox<>();
        updateDataSaveBtn = new javax.swing.JButton();
        updateDataReloadBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        updateDataTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        updateDataSearchCombo = new javax.swing.JComboBox<>();
        updateDataSearchBtn = new javax.swing.JButton();
        updateDataSearchKey = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        deleteDataCombo = new javax.swing.JComboBox<>();
        deleteDataBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        deleteDataTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(186, 79, 84));

        viewDataTab.setBackground(new java.awt.Color(186, 79, 84));
        viewDataTab.setForeground(new java.awt.Color(204, 204, 204));
        viewDataTab.setText("View Data");
        viewDataTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        viewDataTab.setContentAreaFilled(false);
        viewDataTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDataTabActionPerformed(evt);
            }
        });

        insertDataTab.setBackground(new java.awt.Color(186, 79, 84));
        insertDataTab.setForeground(new java.awt.Color(204, 204, 204));
        insertDataTab.setText("Insert Data");
        insertDataTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        insertDataTab.setContentAreaFilled(false);
        insertDataTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertDataTabActionPerformed(evt);
            }
        });

        updateDataTab.setBackground(new java.awt.Color(186, 79, 84));
        updateDataTab.setForeground(new java.awt.Color(204, 204, 204));
        updateDataTab.setText("Update Data");
        updateDataTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        updateDataTab.setContentAreaFilled(false);
        updateDataTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDataTabActionPerformed(evt);
            }
        });

        deleteDataTab.setBackground(new java.awt.Color(186, 79, 84));
        deleteDataTab.setForeground(new java.awt.Color(204, 204, 204));
        deleteDataTab.setText("Delete Data");
        deleteDataTab.setActionCommand("Delete Data");
        deleteDataTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        deleteDataTab.setContentAreaFilled(false);
        deleteDataTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDataTabActionPerformed(evt);
            }
        });

        backBtn.setBackground(new java.awt.Color(186, 79, 84));
        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/back-button.png"))); // NOI18N
        backBtn.setContentAreaFilled(false);
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(viewDataTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(insertDataTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateDataTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteDataTab, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(backBtn)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(backBtn)
                .addGap(74, 74, 74)
                .addComponent(viewDataTab, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(insertDataTab, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(updateDataTab, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(deleteDataTab, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 604));

        jLabel1.setText("Select Table");

        viewDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(viewDataTable);

        jLabel5.setText("Search");

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        reloadButton.setBackground(new java.awt.Color(255, 255, 255));
        reloadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/reload.png"))); // NOI18N
        reloadButton.setContentAreaFilled(false);
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchColCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchKeyWordField, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(searchBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 693, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(reloadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewDataCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(viewDataCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(reloadButton)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchKeyWordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchColCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(searchBtn))
                .addGap(27, 27, 27))
        );

        TabPane.addTab("tab1", jPanel2);

        jLabel2.setText("Select Table");

        insertDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(insertDataTable);

        insertDataBtn.setText("Insert");
        insertDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertDataBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(insertDataBtn)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(insertDataCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(43, 43, 43))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(insertDataCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertDataBtn))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabPane.addTab("tab2", jPanel3);

        jLabel3.setText("Select Table");

        updateDataSaveBtn.setText("Save");
        updateDataSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDataSaveBtnActionPerformed(evt);
            }
        });

        updateDataReloadBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/reload.png"))); // NOI18N
        updateDataReloadBtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        updateDataReloadBtn.setContentAreaFilled(false);
        updateDataReloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDataReloadBtnActionPerformed(evt);
            }
        });

        updateDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(updateDataTable);

        jLabel6.setText("Search");

        updateDataSearchBtn.setText("Search");
        updateDataSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDataSearchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updateDataSearchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(updateDataSearchKey, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(updateDataSearchBtn))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(updateDataReloadBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateDataSaveBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(updateDataCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(28, 28, 28))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(updateDataCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateDataSaveBtn)
                    .addComponent(updateDataReloadBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(updateDataSearchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateDataSearchBtn)
                    .addComponent(updateDataSearchKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabPane.addTab("tab3", jPanel4);

        jLabel4.setText("Select Table");

        deleteDataBtn.setText("Delete");
        deleteDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDataBtnActionPerformed(evt);
            }
        });

        deleteDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(deleteDataTable);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(deleteDataBtn)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(deleteDataCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteDataCombo)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteDataBtn)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabPane.addTab("tab4", jPanel5);

        getContentPane().add(TabPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(261, -36, -1, 640));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void viewDataTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDataTabActionPerformed
        // TODO add your handling code here:
        TabPane.setSelectedIndex(0);
    }//GEN-LAST:event_viewDataTabActionPerformed

    private void insertDataTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertDataTabActionPerformed
        // TODO add your handling code here:
        TabPane.setSelectedIndex(1);
    }//GEN-LAST:event_insertDataTabActionPerformed

    private void updateDataTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDataTabActionPerformed
        // TODO add your handling code here:
        TabPane.setSelectedIndex(2);
    }//GEN-LAST:event_updateDataTabActionPerformed

    private void deleteDataTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDataTabActionPerformed
        // TODO add your handling code here:
        TabPane.setSelectedIndex(3);
    }//GEN-LAST:event_deleteDataTabActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        Index idx = new Index();
        idx.setVisible(true);
        
    }//GEN-LAST:event_backBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        String tableName = (String) viewDataCombo.getSelectedItem();
        String columnName = (String) searchColCombo.getSelectedItem();
        String searchText = searchKeyWordField.getText();
        
          if (tableName != null && !tableName.isEmpty() && columnName != null && !columnName.isEmpty() && !searchText.isEmpty()) {
            searchTable(tableName, columnName, searchText, viewDataTable);
        } else {
            JOptionPane.showMessageDialog(this, "Table, column, and search text are required");
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void reloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonActionPerformed
        // TODO add your handling code here:
        String selectedTable = (String) viewDataCombo.getSelectedItem();

        displayTable(viewDataTable, selectedTable, false);
        loadSearchColumn(selectedTable, searchColCombo);
        
    }//GEN-LAST:event_reloadButtonActionPerformed

    private void insertDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertDataBtnActionPerformed
        // TODO add your handling code here:
        String selectedTable = (String) insertDataCombo.getSelectedItem();

        insertRow(insertDataTable ,selectedTable);
    }//GEN-LAST:event_insertDataBtnActionPerformed

    private void updateDataSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDataSearchBtnActionPerformed
        // TODO add your handling code here:
        String tableName = (String) updateDataCombo.getSelectedItem();
        String columnName = (String) updateDataSearchCombo.getSelectedItem();
        String searchText = updateDataSearchKey.getText();
        System.out.println(searchText);

        if (tableName != null && !tableName.isEmpty() && columnName != null && !columnName.isEmpty() && !searchText.isEmpty()) {
            searchTable(tableName, columnName, searchText, updateDataTable);
        } else {
            JOptionPane.showMessageDialog(this, "Table, column, and search text are required");
        }
    }//GEN-LAST:event_updateDataSearchBtnActionPerformed

    private void updateDataReloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDataReloadBtnActionPerformed
        // TODO add your handling code here:        String selectedTable = (String) viewDataCombo.getSelectedItem();
        String selectedTable = (String) updateDataCombo.getSelectedItem();

        displayTable(updateDataTable, selectedTable, false);
        loadSearchColumn(selectedTable, updateDataSearchCombo);
    }//GEN-LAST:event_updateDataReloadBtnActionPerformed

    private void updateDataSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDataSaveBtnActionPerformed
        // TODO add your handling code here:
        String selectedTable = (String) updateDataCombo.getSelectedItem();

        saveTableData(updateDataTable, selectedTable);
    }//GEN-LAST:event_updateDataSaveBtnActionPerformed

    private void deleteDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDataBtnActionPerformed
        // TODO add your handling code here:
        String selectedTable = (String) deleteDataCombo.getSelectedItem();

        deleteRow(deleteDataTable, selectedTable);
    }//GEN-LAST:event_deleteDataBtnActionPerformed
    
    private void saveTableData(JTable table, String tableName) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rowCount = model.getRowCount();
        int columnCount = model.getColumnCount();

        try {
            Connection conn = DBService.getConnection();
            Statement stmt = conn.createStatement();

            for (int i = 0; i < rowCount; i++) {
                // Skip the blank row at the end
                if (model.getValueAt(i, 0) == null) {
                    continue;
                }

                StringBuilder sql = new StringBuilder("UPDATE " + tableName + " SET ");
                for (int j = 1; j < columnCount; j++) { // Assuming the first column is the primary key
                    String columnName = model.getColumnName(j);
                    Object value = model.getValueAt(i, j);
                    sql.append(columnName).append(" = ");
                    if (value == null) {
                        sql.append("NULL");
                    } else {
                        sql.append("'").append(value.toString()).append("'");
                    }
                    if (j < columnCount - 1) {
                        sql.append(", ");
                    }
                }
                sql.append(" WHERE ").append(model.getColumnName(0)).append(" = '").append(model.getValueAt(i, 0)).append("'");
                stmt.executeUpdate(sql.toString());
            }

            stmt.close();
            conn.close();

            // Refresh the table display after saving
            displayTable(table, tableName, false);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void searchTable(String tableName, String columnName, String searchText, JTable tableModel) {
        try {
            Connection conn = DBService.getConnection();
            String sql = "SELECT * FROM " + tableName + " WHERE " + columnName + " LIKE ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, "%" + searchText + "%");
            ResultSet rs = pstmt.executeQuery();
            tableModel.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error searching table: " + e.getMessage());
        } 
    }
    
    private void loadViewData() {
        ResultSet rs = null;
        Statement stmt = null;
        try {
            viewDataCombo.removeAllItems();
            Connection con = DBService.getConnection();
            stmt = con.createStatement();
            rs = stmt.executeQuery("show tables");

            while (rs.next()) {
                String tables = rs.getString("Tables_in_smart_home");
                viewDataCombo.addItem(tables);
            }
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            String selectedTable = (String) viewDataCombo.getSelectedItem();
            displayTable(viewDataTable,selectedTable, false);
            loadSearchColumn(selectedTable, searchColCombo);
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    
    private void loadInsertData() {
        ResultSet rs = null;
        Statement stmt = null;
        try {
            insertDataCombo.removeAllItems();
            Connection con = DBService.getConnection();
            stmt = con.createStatement();
            rs = stmt.executeQuery("show tables");

            while (rs.next()) {
                String tables = rs.getString("Tables_in_smart_home");
                insertDataCombo.addItem(tables);
            }
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            String selectedTable = (String) insertDataCombo.getSelectedItem();
            displayTable(insertDataTable, selectedTable, true);
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    
    private void loadUpdateData() {
        ResultSet rs = null;
        Statement stmt = null;
        try {
            updateDataCombo.removeAllItems();
            Connection con = DBService.getConnection();
            stmt = con.createStatement();
            rs = stmt.executeQuery("show tables");

            while (rs.next()) {
                String tables = rs.getString("Tables_in_smart_home");
                updateDataCombo.addItem(tables);
            }
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            String selectedTable = (String) updateDataCombo.getSelectedItem();
            displayTable(updateDataTable, selectedTable, true);
            loadSearchColumn(selectedTable, updateDataSearchCombo);
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    
    private void loadDeleteData() {
        ResultSet rs = null;
        Statement stmt = null;
        try {
            deleteDataCombo.removeAllItems();
            Connection con = DBService.getConnection();
            stmt = con.createStatement();
            rs = stmt.executeQuery("show tables");

            while (rs.next()) {
                String tables = rs.getString("Tables_in_smart_home");
                deleteDataCombo.addItem(tables);
            }
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            String selectedTable = (String) deleteDataCombo.getSelectedItem();
            displayTable(deleteDataTable, selectedTable, false);
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    private void deleteRow(JTable table, String tableName) {
        int row = table.getSelectedRow();
        if (row != -1) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            Object primaryKeyValue = model.getValueAt(row, 0); // Assuming the first column is the primary key

            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to delete this row?",
                    "Confirm Row Deletion",
                    JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    Connection conn = DBService.getConnection();
                    String primaryKeyColumnName = getPrimaryKeyColumnName(tableName, conn);

                    if (primaryKeyColumnName != null) {
                        String sql = "DELETE FROM " + tableName + " WHERE " + primaryKeyColumnName + " = ?";
                        PreparedStatement pstmt = conn.prepareStatement(sql);
                        pstmt.setObject(1, primaryKeyValue);
                        pstmt.executeUpdate();
                        pstmt.close();
                        conn.close();

                        // Remove row from table model
                        model.removeRow(row);
                    } else {
                        JOptionPane.showMessageDialog(this, "Primary key column not found for table " + tableName);
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No row selected for deletion.");
        }
    }

    private String getPrimaryKeyColumnName(String tableName, Connection conn) throws SQLException {
        String primaryKeyColumnName = null;
        DatabaseMetaData metaData = conn.getMetaData();
        ResultSet rs = metaData.getPrimaryKeys(null, null, tableName);

        if (rs.next()) {
            primaryKeyColumnName = rs.getString("COLUMN_NAME");
        }

        rs.close();
        return primaryKeyColumnName;
    }
    
    private void insertRow(JTable table, String tableName) {
        try {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            int lastRow = model.getRowCount() - 1;
            int columnCount = model.getColumnCount();
            System.out.println(columnCount);


            StringBuilder sql = new StringBuilder("INSERT INTO " + tableName + " VALUES (");
            for (int i = 0; i < columnCount; i++) {
                Object value = model.getValueAt(lastRow, i);
                if (value == null) {
                    sql.append("NULL");
                } else {
                    sql.append("'").append(value.toString()).append("'");
                }
                if (i < columnCount - 1) {
                    sql.append(", ");
                }
            }
            sql.append(")");

            Connection conn = DBService.getConnection();
            Statement stmt = conn.createStatement();
            
            System.out.println(sql);
            stmt.executeUpdate(sql.toString());

            // Refresh the table display after insertion
            displayTable(table, tableName, true);

            stmt.close();
            conn.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void displayTable(JTable tableName, String tableNameStr, boolean emptyRow ) {
        try {
            Connection conn = DBService.getConnection();
            String sql = "SELECT * FROM " + tableNameStr;
            PreparedStatement pstmt = conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();

            // Get metadata to create column names
            ResultSetMetaData metaData = rs.getMetaData();
            int columnCount = metaData.getColumnCount();
            String[] columnNames = new String[columnCount];
            for (int i = 1; i <= columnCount; i++) {
                columnNames[i - 1] = metaData.getColumnName(i);
            }

            // Create a DefaultTableModel and add data to it
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);
            while (rs.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    rowData[i - 1] = rs.getObject(i);
                }
                model.addRow(rowData);
            }

            if(emptyRow) model.addRow(new Object[columnCount]);
            

            // Set the model to the JTable
            tableName.setModel(model);

            rs.close();
            pstmt.close();
            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void loadSearchColumn(String tableName, JComboBox comboBox) {
        comboBox.removeAllItems();
        try {
            Connection con = DBService.getConnection();
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SHOW COLUMNS FROM " + tableName);
            while(rs.next()) {
                comboBox.addItem(rs.getString(1));
            }
            
            rs.close();
            stmt.close();
            con.close();
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading columns: " + e.getMessage());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageData().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane TabPane;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton deleteDataBtn;
    private javax.swing.JComboBox<String> deleteDataCombo;
    private javax.swing.JButton deleteDataTab;
    private javax.swing.JTable deleteDataTable;
    private javax.swing.JButton insertDataBtn;
    private javax.swing.JComboBox<String> insertDataCombo;
    private javax.swing.JButton insertDataTab;
    private javax.swing.JTable insertDataTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton reloadButton;
    private javax.swing.JButton searchBtn;
    private javax.swing.JComboBox<String> searchColCombo;
    private javax.swing.JTextField searchKeyWordField;
    private javax.swing.JComboBox<String> updateDataCombo;
    private javax.swing.JButton updateDataReloadBtn;
    private javax.swing.JButton updateDataSaveBtn;
    private javax.swing.JButton updateDataSearchBtn;
    private javax.swing.JComboBox<String> updateDataSearchCombo;
    private javax.swing.JTextField updateDataSearchKey;
    private javax.swing.JButton updateDataTab;
    private javax.swing.JTable updateDataTable;
    private javax.swing.JComboBox<String> viewDataCombo;
    private javax.swing.JButton viewDataTab;
    private javax.swing.JTable viewDataTable;
    // End of variables declaration//GEN-END:variables
}
