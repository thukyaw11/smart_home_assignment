/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app;

import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import utils.DBService;
import model.ColumnInput;
import net.proteanit.sql.DbUtils;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.util.List;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author devminnthu
 */
public class ManageDatabase extends javax.swing.JFrame {
    
    

    private JTextField[] columnNames;
    private JComboBox<String>[] columnTypes;
    private final List<ColumnInput> columnInputs = new ArrayList<>();
    /**
     * Creates new form ManageDatabase
     */
    public ManageDatabase() {
        initComponents();
        load();
       


        
        viewTableCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String selectedTable = (String) viewTableCombo.getSelectedItem();

                displayTable(tableView, selectedTable);
            }
        });
        
        columnCountCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                updateColumnInputs();
            }
        });
        
        insertColComBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String selectedTable = (String) insertColComBox.getSelectedItem();

                displayTableStructure(insertColTable, selectedTable, "insert");
            }
        });
        
        
        deleteTableComboBox.addActionListener(new ActionListener() {
           public void actionPerformed(ActionEvent e) {
               String selectedTable = (String) deleteTableComboBox.getSelectedItem();

               displayTableStructure(deleteTable, selectedTable, "delete");
           }
        });
        
        editTableCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String selectedTable = (String) editTableCombo.getSelectedItem();

                displayTableStructure(editTable, selectedTable, "edit");
            }
        });
        
        dropTableCombo.addActionListener(new ActionListener() {
              public void actionPerformed(ActionEvent e) {
                  String selectedTable = (String) dropTableCombo.getSelectedItem();
                  
                  displayTableStructure(dropTableStructure, selectedTable, "delete table");
                  displayTable(dropTableContent, selectedTable);
              }
        });
        
        // add edit table listener
        editTable.getSelectionModel().addListSelectionListener(e -> populateFieldsFromSelectedRow());
        pack();
        
        
      
    }

    private void load() {
        viewTable();
        viewInsertColTable();
        viewDeleteColTable();
        viewEditColTable();
        updateColumnInputs();
        viewDropTable();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deleteTableButton = new javax.swing.JPanel();
        viewTableButton = new javax.swing.JButton();
        createTableButton = new javax.swing.JButton();
        insertColumnButton = new javax.swing.JButton();
        deleteColumnButton = new javax.swing.JButton();
        editTableButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        viewPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        viewTableCombo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableView = new javax.swing.JTable();
        createPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tableNameField = new javax.swing.JTextField();
        columnCountCombo = new javax.swing.JComboBox<>();
        columnPanel = new javax.swing.JPanel();
        createTbl = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        insertColComBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        insertColTable = new javax.swing.JTable();
        insertColumnBtn = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        deleteTableComboBox = new javax.swing.JComboBox<>();
        deleteColButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        deleteTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        editTableCombo = new javax.swing.JComboBox<>();
        editButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        editTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        colNameTxtField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        editColDataTypeCombo = new javax.swing.JComboBox<>();
        nullableCheckbox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        dropTableCombo = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        dropTableStructure = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        dropTableContent = new javax.swing.JTable();
        dropTableButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manage Database");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        deleteTableButton.setBackground(new java.awt.Color(186, 79, 84));

        viewTableButton.setBackground(new java.awt.Color(184, 79, 84));
        viewTableButton.setForeground(new java.awt.Color(204, 204, 204));
        viewTableButton.setText("View Table");
        viewTableButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        viewTableButton.setContentAreaFilled(false);
        viewTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTableButtonActionPerformed(evt);
            }
        });

        createTableButton.setBackground(new java.awt.Color(184, 79, 84));
        createTableButton.setForeground(new java.awt.Color(204, 204, 204));
        createTableButton.setText("Create Table");
        createTableButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        createTableButton.setContentAreaFilled(false);
        createTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTableButtonActionPerformed(evt);
            }
        });

        insertColumnButton.setBackground(new java.awt.Color(184, 79, 84));
        insertColumnButton.setForeground(new java.awt.Color(204, 204, 204));
        insertColumnButton.setText("Insert Column");
        insertColumnButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        insertColumnButton.setContentAreaFilled(false);
        insertColumnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertColumnButtonActionPerformed(evt);
            }
        });

        deleteColumnButton.setBackground(new java.awt.Color(184, 79, 84));
        deleteColumnButton.setForeground(new java.awt.Color(204, 204, 204));
        deleteColumnButton.setText("Delete Column");
        deleteColumnButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        deleteColumnButton.setContentAreaFilled(false);
        deleteColumnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteColumnButtonActionPerformed(evt);
            }
        });

        editTableButton.setBackground(new java.awt.Color(184, 79, 84));
        editTableButton.setForeground(new java.awt.Color(204, 204, 204));
        editTableButton.setText("Edit Table");
        editTableButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        editTableButton.setContentAreaFilled(false);
        editTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTableButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(184, 79, 84));
        deleteButton.setForeground(new java.awt.Color(204, 204, 204));
        deleteButton.setText("Delete Table");
        deleteButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        deleteButton.setContentAreaFilled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(186, 79, 84));
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/back-button.png"))); // NOI18N
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deleteTableButtonLayout = new javax.swing.GroupLayout(deleteTableButton);
        deleteTableButton.setLayout(deleteTableButtonLayout);
        deleteTableButtonLayout.setHorizontalGroup(
            deleteTableButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteTableButtonLayout.createSequentialGroup()
                .addGroup(deleteTableButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deleteTableButtonLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(deleteTableButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(createTableButton, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(insertColumnButton, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(deleteColumnButton, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(editTableButton, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(viewTableButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(deleteTableButtonLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        deleteTableButtonLayout.setVerticalGroup(
            deleteTableButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteTableButtonLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(backButton)
                .addGap(31, 31, 31)
                .addComponent(viewTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(createTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(insertColumnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(deleteColumnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(editTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(67, Short.MAX_VALUE))
        );

        getContentPane().add(deleteTableButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 590));

        jLabel1.setText("Select Table");

        viewTableCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tableView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableView);

        javax.swing.GroupLayout viewPanelLayout = new javax.swing.GroupLayout(viewPanel);
        viewPanel.setLayout(viewPanelLayout);
        viewPanelLayout.setHorizontalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewPanelLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 717, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(viewPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewTableCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27))
        );
        viewPanelLayout.setVerticalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewPanelLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(viewTableCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab1", viewPanel);

        createPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setText("Table Name");
        createPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, 20));

        jLabel6.setText("No of Column");
        createPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 70, -1, -1));
        createPanel.add(tableNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 140, -1));

        columnCountCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        columnCountCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnCountComboActionPerformed(evt);
            }
        });
        createPanel.add(columnCountCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 70, 110, -1));

        javax.swing.GroupLayout columnPanelLayout = new javax.swing.GroupLayout(columnPanel);
        columnPanel.setLayout(columnPanelLayout);
        columnPanelLayout.setHorizontalGroup(
            columnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );
        columnPanelLayout.setVerticalGroup(
            columnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 440, Short.MAX_VALUE)
        );

        createPanel.add(columnPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 610, 440));

        createTbl.setText("Create Table");
        createTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTblActionPerformed(evt);
            }
        });
        createPanel.add(createTbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(644, 500, 110, -1));

        jTabbedPane1.addTab("tab2", createPanel);

        jLabel4.setText("Select Table");

        insertColTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        )
        {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        }
    );
    jScrollPane2.setViewportView(insertColTable);

    insertColumnBtn.setText("Insert");
    insertColumnBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            insertColumnBtnActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(insertColumnBtn)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel4)
                    .addGap(18, 18, 18)
                    .addComponent(insertColComBox, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(31, 31, 31))
    );
    jPanel4Layout.setVerticalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addGap(21, 21, 21)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel4)
                .addComponent(insertColComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(insertColumnBtn))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(73, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab("tab3", jPanel4);

    jLabel3.setText("Select Table");

    deleteColButton.setText("Delete");
    deleteColButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteColButtonActionPerformed(evt);
        }
    });

    deleteTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    ));
    jScrollPane3.setViewportView(deleteTable);

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jScrollPane3)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(0, 413, Short.MAX_VALUE)
                    .addComponent(deleteColButton)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel3)
                    .addGap(18, 18, 18)
                    .addComponent(deleteTableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(36, 36, 36))
    );
    jPanel5Layout.setVerticalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel3)
                .addComponent(deleteTableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(deleteColButton))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(62, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab("tab4", jPanel5);

    jLabel2.setText("Select Table");

    editButton.setText("Save");
    editButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            editButtonActionPerformed(evt);
        }
    });

    editTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    ));
    jScrollPane4.setViewportView(editTable);

    jLabel7.setText("Column Name");

    jLabel8.setText("Type");

    editColDataTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "VARCHAR(255)", "INTEGER", "DATE", "BOOLEAN", "DECIMAL" }));

    nullableCheckbox.setText("Nullable");
    nullableCheckbox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            nullableCheckboxActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
    jPanel6.setLayout(jPanel6Layout);
    jPanel6Layout.setHorizontalGroup(
        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel6Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addComponent(jLabel7)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(colNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(40, 40, 40)
                    .addComponent(jLabel8)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(editColDataTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(35, 35, 35)
                    .addComponent(nullableCheckbox)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                    .addComponent(editButton))
                .addComponent(jScrollPane4)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addGap(18, 18, 18)
                    .addComponent(editTableCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(41, 41, 41))
    );
    jPanel6Layout.setVerticalGroup(
        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel6Layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(editTableCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel7)
                .addComponent(colNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel8)
                .addComponent(editColDataTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(nullableCheckbox)
                .addComponent(editButton))
            .addContainerGap(125, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab("tab5", jPanel6);

    jLabel9.setText("Select Table");

    dropTableStructure.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    ));
    jScrollPane5.setViewportView(dropTableStructure);

    dropTableContent.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    ));
    jScrollPane6.setViewportView(dropTableContent);

    dropTableButton.setText("Delete");
    dropTableButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            dropTableButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
                .addComponent(jScrollPane5)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(dropTableButton)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel9)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(dropTableCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(32, 32, 32))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(22, 22, 22)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel9)
                .addComponent(dropTableCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(dropTableButton))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(45, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab("tab6", jPanel1);

    getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, -40, 760, 630));

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void viewTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTableButtonActionPerformed
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_viewTableButtonActionPerformed

    private void viewTable() {
        ResultSet rs = null;
        Statement stmt = null;
        try {
            viewTableCombo.removeAllItems();
            Connection con = DBService.getConnection();
            stmt = con.createStatement();
            rs = stmt.executeQuery("show tables");
            
            while (rs.next()) {
                String tables = rs.getString("Tables_in_smart_home");
                viewTableCombo.addItem(tables);
            }
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            String selectedTable = (String) viewTableCombo.getSelectedItem();
            displayTable(tableView, selectedTable);
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
   
    private void viewInsertColTable() {
        ResultSet rs = null;
        Statement stmt = null;
        try {
            insertColComBox.removeAllItems();
            Connection con = DBService.getConnection();
            stmt = con.createStatement();
            rs = stmt.executeQuery("show tables");

            while (rs.next()) {
                String tables = rs.getString("Tables_in_smart_home");
                insertColComBox.addItem(tables);
            }
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            String selectedTable = (String) viewTableCombo.getSelectedItem();
            displayTableStructure(insertColTable, selectedTable, "insert");
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    
    private void viewDeleteColTable() {
        ResultSet rs = null;
        Statement stmt = null;
        try {
            deleteTableComboBox.removeAllItems();
            Connection con = DBService.getConnection();
            stmt = con.createStatement();
            rs = stmt.executeQuery("show tables");

            while (rs.next()) {
                String tables = rs.getString("Tables_in_smart_home");
                deleteTableComboBox.addItem(tables);
            }
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            String selectedTable = (String) deleteTableComboBox.getSelectedItem();
            displayTableStructure(deleteTable, selectedTable, "delete");
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } 
    }
    
    private void viewEditColTable() {
        ResultSet rs = null;
        Statement stmt = null;
        try {
            editTableCombo.removeAllItems();
            Connection con = DBService.getConnection();
            stmt = con.createStatement();
            rs = stmt.executeQuery("show tables");

            while (rs.next()) {
                String tables = rs.getString("Tables_in_smart_home");
                editTableCombo.addItem(tables);
            }
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            String selectedTable = (String) editTableCombo.getSelectedItem();
            displayTableStructure(editTable, selectedTable, "edit");
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    
        private void viewDropTable() {
        ResultSet rs = null;
        Statement stmt = null;
        try {
            dropTableCombo.removeAllItems();
            Connection con = DBService.getConnection();
            stmt = con.createStatement();
            rs = stmt.executeQuery("show tables");

            while (rs.next()) {
                String tables = rs.getString("Tables_in_smart_home");
                dropTableCombo.addItem(tables);
            }
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        } finally {
            String selectedTable = (String) dropTableCombo.getSelectedItem();
            displayTableStructure(dropTableStructure, selectedTable, "edit");
            displayTable(dropTableContent, selectedTable);

            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    
    private void updateColumnInputs() {
        int columnCount = Integer.parseInt((String) columnCountCombo.getSelectedItem());

        columnInputs.clear();
        columnPanel.removeAll();

    
        columnPanel.setLayout(new BoxLayout(columnPanel, BoxLayout.Y_AXIS));

        for (int i = 0; i < columnCount; i++) {
            JPanel rowPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));

            JTextField textField = new JTextField(15); 
            rowPanel.add(new JLabel("Column " + (i+1)));
            rowPanel.add(textField);

        
            String[] options = {"VARCHAR(255)", "INTEGER", "DATE", "BOOLEAN", "DECIMAL"}; // Example options
            JComboBox<String> selectBox = new JComboBox<>(options);
            selectBox.setSelectedItem("VARCHAR");
            rowPanel.add(selectBox);

            JCheckBox checkBox1 = new JCheckBox("Nullable");
            JCheckBox checkBox2 = new JCheckBox("Primary Key");
            rowPanel.add(checkBox1);
            rowPanel.add(checkBox2);
            columnInputs.add(new ColumnInput(textField, selectBox, checkBox1, checkBox2)); 
            columnPanel.add(rowPanel);

            if (i < columnCount - 1) {
                columnPanel.add(Box.createVerticalStrut(5)); 
            }
        }

        columnPanel.revalidate();
        columnPanel.repaint();
    }
    


    
    private void displayTable(JTable tableName, String tableNameStr) {
        try {
            Connection conn = DBService.getConnection();
            String sql = "select * from " + tableNameStr + "";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
            tableName.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void displayTableStructure(JTable tableName,String tableNameStr, String action) {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Field");
        model.addColumn("Type");
        model.addColumn("Key");
        model.addColumn("Nullable");
        model.addColumn("Extra");
        
        try {
            Connection con = DBService.getConnection();
            String sql = "describe " + tableNameStr;
            PreparedStatement pstmt = con.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
            
            while(rs.next()) {
                String field = rs.getString("Field");
                String type = rs.getString("Type");
                String key = rs.getString("Key");
                String nullable = rs.getString("Null");
                String extra = rs.getString("Extra");
                
                model.addRow(new Object[]{field, type, key, nullable, extra});
            }
            if(action == "insert") model.addRow(new Object[]{"", "", "", "", ""});
            
            tableName.setModel(model);
            
            rs.close();
            pstmt.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    
    
    public List<ColumnInput> retrieveColumnData() {
        List<ColumnInput> columnData = new ArrayList<>();

        for (ColumnInput input : columnInputs) {
            String columnName = input.getTextField().getText();
            String dataType = (String) input.getSelectBox().getSelectedItem();
            boolean isNullable = input.getCheckBox1().isSelected();
            boolean isPrimaryKey = input.getCheckBox2().isSelected();

            columnData.add(new ColumnInput(columnName, dataType, isNullable, isPrimaryKey));
        }
        return columnData;
    }
    
    private void createTable(List<ColumnInput> columnData, String tableName) {
        try(Connection con = DBService.getConnection()) {
            StringBuilder sql = new StringBuilder("CREATE TABLE " + tableName + " (");
            for(ColumnInput column : columnData) {
                sql.append(column.getColumnName()).append(" ").append(column.getDataType());
                
                if(!column.isNullable()) {
                    sql.append(" NOT NULL");
                }
                
                if(column.isPrimaryKey()) {
                    sql.append(" PRIMARY KEY");
                }
                
                sql.append(", ");
            }
            
            sql.setLength(sql.length() - 2);
            sql.append(");");
            
            System.out.println(sql.toString());
            
            try (Statement stmt = con.createStatement()) {
                stmt.executeUpdate(sql.toString());
                JOptionPane.showMessageDialog(null, "Table " + tableName + " created successfully.");
            }
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void createTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTableButtonActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
  

    }//GEN-LAST:event_createTableButtonActionPerformed

    private void insertColumnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertColumnButtonActionPerformed
        // TODO add your handling code here:

        jTabbedPane1.setSelectedIndex(2);
        

    }//GEN-LAST:event_insertColumnButtonActionPerformed

    private void deleteColumnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteColumnButtonActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(3);

    }//GEN-LAST:event_deleteColumnButtonActionPerformed

    private void editTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTableButtonActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(4);

    }//GEN-LAST:event_editTableButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(5);

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        Index idx = new Index();
        setVisible(false);
        idx.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void columnCountComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnCountComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_columnCountComboActionPerformed

    private boolean isAtLeastOneColumnDefined(List<ColumnInput> columnData) {
        for (ColumnInput input : columnData) {
            if (!input.getColumnName().isEmpty()) {
                return true;
            }
        }
        return false;
    }
    
    private void createTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTblActionPerformed
        // TODO add your handling code here:
        String tableName = tableNameField.getText();
        List<ColumnInput> columnData = retrieveColumnData();
        if (!tableName.isEmpty() && !columnData.isEmpty() && isAtLeastOneColumnDefined(columnData)) {
            createTable(columnData, tableName);
        } else {
            JOptionPane.showMessageDialog(this, "Table name and at least one column are required.");
        }
        
    }//GEN-LAST:event_createTblActionPerformed

    private void insertColumnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertColumnBtnActionPerformed
        // TODO add your handling code here:
        String tableName = (String) insertColComBox.getSelectedItem();
        saveNewColumn((DefaultTableModel) insertColTable.getModel(), tableName);
    }//GEN-LAST:event_insertColumnBtnActionPerformed

    private void deleteColButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteColButtonActionPerformed
        // TODO add your handling code here:
        String tableName = (String) deleteTableComboBox.getSelectedItem();
        int selectedRow = deleteTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a column to delete.");
            return;
        }

        // Retrieve column name from the selected row
        String columnName = (String) deleteTable.getValueAt(selectedRow, 0);
        if (!tableName.isEmpty() && !columnName.isEmpty()) {
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to delete column '" + columnName + "' from table '" + tableName + "'?",
                    "Confirm Column Deletion",
                    JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                deleteColumn(tableName, columnName);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Table name and column name are required");
        }
    }//GEN-LAST:event_deleteColButtonActionPerformed

    private void nullableCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nullableCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nullableCheckboxActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        String tableName = (String) editTableCombo.getSelectedItem();
        updateColumnActionPerformed(tableName);
        
    }//GEN-LAST:event_editButtonActionPerformed

    private void dropTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropTableButtonActionPerformed
        String tableName = (String) dropTableCombo.getSelectedItem();

        if (tableName != null && !tableName.isEmpty()) {
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to delete table '" + tableName + "'?",
                    "Confirm Table Deletion",
                    JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                dropTable(tableName);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Table name is required");
        }
    }//GEN-LAST:event_dropTableButtonActionPerformed
    
    private void dropTable(String tableName) { Connection con = null;
        Statement stmt = null;
        try {
            con = DBService.getConnection();
            stmt = con.createStatement();
            String sql = "DROP TABLE " + tableName;
            stmt.executeUpdate(sql);
            JOptionPane.showMessageDialog(this, "Table '" + tableName + "' deleted successfully");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error deleting table: " + e.getMessage());
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error closing resources: " + e.getMessage());
            }
        }
    }
    private void updateColumnActionPerformed(String tableName) {
        int selectedRow = editTable.getSelectedRow();
        if(selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a column to update.");
            return;
        }
        
        String oldColumnName = (String) editTable.getValueAt(selectedRow, 0);
        String newColumnName = colNameTxtField.getText();
        String newDataType = (String) editColDataTypeCombo.getSelectedItem();
        boolean isNullable = nullableCheckbox.isSelected();
        String nullableValue = isNullable ? "NULL" : "NOT NULL";
        System.out.println(tableName);

        
        String sql = String.format("ALTER TABLE %s CHANGE %s %s %s %s", tableName, oldColumnName, newColumnName, newDataType, nullableValue);

        
        try (Connection con = DBService.getConnection();
              PreparedStatement pstmt = con.prepareStatement(sql)) {
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Column updated successfully!");
            displayTableStructure(editTable, tableName, "edit");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void saveNewColumn(DefaultTableModel model, String tableName) {
        try {
            int lastRow = model.getRowCount() - 1;
            String fieldName = (String) model.getValueAt(lastRow, 0);
            String fieldType = (String) model.getValueAt(lastRow, 1);
            String nullableValue = (String) model.getValueAt(lastRow, 3);
            String primaryKey = (String) model.getValueAt(lastRow, 2);
            
            System.out.println(nullableValue + fieldName +  fieldType);
            if (nullableValue.equalsIgnoreCase("YES") || nullableValue.equalsIgnoreCase("NO") || nullableValue.isEmpty()) {
                if (primaryKey.equalsIgnoreCase("pri") || primaryKey.isEmpty()) {
                    StringBuilder sql = new StringBuilder("ALTER TABLE " + tableName + " ADD COLUMN " + fieldName + " " + fieldType);

                    if (primaryKey.equalsIgnoreCase("pri")) {
                        sql.append(" PRIMARY KEY");
                    }

                    if (nullableValue.equalsIgnoreCase("NO")) {
                        sql.append(" NOT NULL");
                    }
                    
                    Connection conn = DBService.getConnection();
                    PreparedStatement pstmt = conn.prepareStatement(sql.toString());
                    pstmt.executeUpdate();

                    JOptionPane.showMessageDialog(null, "Column added successfully!");

                    pstmt.close();
                    conn.close();
                    
                    displayTableStructure(deleteTable, tableName, "insert");

                } else {
                    JOptionPane.showMessageDialog(null, "Primary key must be 'pri'");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Nullable value must be 'YES' or 'NO'");
            }
            
            
            
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void deleteColumn(String tableName, String columnName) {
        try {
           String sql = "ALTER TABLE " + tableName + " DROP COLUMN " + columnName;
           
           Connection con = DBService.getConnection();
           PreparedStatement pstmt = con.prepareStatement(sql);
           pstmt.executeUpdate();
           
           JOptionPane.showMessageDialog(null, "Column deleted successfully!");
           
           pstmt.close();
           con.close();
           
            displayTableStructure(deleteTable, tableName, "delete");

           
           
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    
    private void populateFieldsFromSelectedRow() {
        int selectedRow = editTable.getSelectedRow();
        if(selectedRow != -1) {
            String columnName = (String) editTable.getValueAt(selectedRow, 0);
            String dataType = (String) editTable.getValueAt(selectedRow, 1);
            System.out.println(dataType);
            boolean isNullable = "YES".equals(editTable.getValueAt(selectedRow, 2));
            
            colNameTxtField.setText(columnName);
            editColDataTypeCombo.setSelectedItem(mapTypeToComboOption(dataType));
            nullableCheckbox.setSelected(isNullable);
        }
    }
    
    private String mapTypeToComboOption(String dbType) {
        if(dbType.startsWith("varchar")) {
            return "VARCHAR(255)";
        } else if(dbType.equalsIgnoreCase("INT")) {
            return "INTEGER";
        } else if(dbType.equalsIgnoreCase("DECIMAL")) {
            return "DECIMAL";
        } else if(dbType.startsWith("enum")) {
            return "ENUM";
        }
        
        return dbType;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageDatabase().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTextField colNameTxtField;
    private javax.swing.JComboBox<String> columnCountCombo;
    private javax.swing.JPanel columnPanel;
    private javax.swing.JPanel createPanel;
    private javax.swing.JButton createTableButton;
    private javax.swing.JButton createTbl;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteColButton;
    private javax.swing.JButton deleteColumnButton;
    private javax.swing.JTable deleteTable;
    private javax.swing.JPanel deleteTableButton;
    private javax.swing.JComboBox<String> deleteTableComboBox;
    private javax.swing.JButton dropTableButton;
    private javax.swing.JComboBox<String> dropTableCombo;
    private javax.swing.JTable dropTableContent;
    private javax.swing.JTable dropTableStructure;
    private javax.swing.JButton editButton;
    private javax.swing.JComboBox<String> editColDataTypeCombo;
    private javax.swing.JTable editTable;
    private javax.swing.JButton editTableButton;
    private javax.swing.JComboBox<String> editTableCombo;
    private javax.swing.JComboBox<String> insertColComBox;
    private javax.swing.JTable insertColTable;
    private javax.swing.JButton insertColumnBtn;
    private javax.swing.JButton insertColumnButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox nullableCheckbox;
    private javax.swing.JTextField tableNameField;
    private javax.swing.JTable tableView;
    private javax.swing.JPanel viewPanel;
    private javax.swing.JButton viewTableButton;
    private javax.swing.JComboBox<String> viewTableCombo;
    // End of variables declaration//GEN-END:variables
}
